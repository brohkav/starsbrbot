import os
import logging
import json
import time
import sys
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
from config import MIN_STARS, RATES, PAYMENT_METHODS, MESSAGES, REFERRAL_BONUS, REFERRAL_PERCENT, PROMOCODE_BONUS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_errors.log'),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
SUPPORT_CHAT_ID = "broshkav"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
user_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  balance INTEGER DEFAULT 0,
                  invited_by INTEGER DEFAULT 0)''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS promocodes
                 (code TEXT PRIMARY KEY,
                  bonus INTEGER,
                  used_by INTEGER DEFAULT 0,
                  used_at DATETIME)''')
    
    conn.commit()
    conn.close()

init_db()

def get_balance(user_id: int) -> int:
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else 0

def update_balance(user_id: int, amount: int):
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    c.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', 
              (amount, user_id))
    conn.commit()
    conn.close()

def save_history(user_id: int, stars: int, amount: float, method: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã"""
    data = {
        "date": datetime.now().strftime("%d.%m.%Y %H:%M"),
        "stars": stars,
        "amount": amount,
        "method": method,
        "status": "pending"
    }
    with open('history.json', 'a', encoding='utf-8') as f:
        json.dump({str(user_id): data}, f, ensure_ascii=False)
        f.write('\n')

def get_stars_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton("50 ‚≠ê", callback_data="stars_50"),
        InlineKeyboardButton("100 ‚≠ê", callback_data="stars_100"),
        InlineKeyboardButton("200 ‚≠ê", callback_data="stars_200"),
        InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="stars_custom")
    ]
    keyboard.add(*buttons)
    return keyboard

def get_payment_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(PAYMENT_METHODS["kaspi"]["name"]))
    keyboard.add(KeyboardButton(PAYMENT_METHODS["cryptobot"]["name"]))
    keyboard.add(KeyboardButton(PAYMENT_METHODS["tonkeeper"]["name"]))
    return keyboard

def get_paid_button():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="user_paid"))
    return keyboard

def get_admin_confirm_keyboard(user_id):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{user_id}")
    )
    return keyboard

def get_main_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton('‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã'),
        KeyboardButton('üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å'),
        KeyboardButton('üéÅ –ü—Ä–æ–º–æ–∫–æ–¥'),
        KeyboardButton('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã'),
        KeyboardButton('üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫'),
        KeyboardButton('üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    )
    return markup

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    args = message.get_args()
    user_id = message.from_user.id
    
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if args and args.startswith('ref_'):
        referrer_id = int(args.split('_')[1])
        if referrer_id != user_id:
            conn = sqlite3.connect('bot.db')
            c = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω
            c.execute('SELECT invited_by FROM users WHERE user_id = ?', (user_id,))
            if c.fetchone() is None:
                update_balance(referrer_id, REFERRAL_BONUS)
                c.execute('UPDATE users SET invited_by = ? WHERE user_id = ?',
                         (referrer_id, user_id))
                await bot.send_message(
                    referrer_id,
                    f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {REFERRAL_BONUS} –∑–≤–µ–∑–¥"
                )
            
            conn.commit()
            conn.close()

    await message.answer(
        "üîπ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

@dp.message_handler(text='üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å')
async def show_balance(message: types.Message):
    balance = get_balance(message.from_user.id)
    await message.answer(f"üíé –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∑–≤–µ–∑–¥")

@dp.message_handler(commands=['promo'])
async def handle_promocode(message: types.Message):
    try:
        if len(message.text.split()) < 2:
            await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /promo CODE")
            return

        user_id = message.from_user.id
        code = message.text.split()[1]
        
        conn = sqlite3.connect('bot.db')
        c = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        c.execute('SELECT bonus, used_by FROM promocodes WHERE code = ?', (code,))
        result = c.fetchone()
        
        if not result:
            await message.answer(MESSAGES["promo_invalid"])
            return
            
        bonus, used_by = result
        if used_by != 0:
            await message.answer(MESSAGES["promo_used"])
            return
            
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        update_balance(user_id, bonus)
        c.execute('UPDATE promocodes SET used_by = ?, used_at = ? WHERE code = ?',
                 (user_id, datetime.now().isoformat(), code))
        
        await message.answer(MESSAGES["promo_activated"].format(bonus=bonus))
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    finally:
        conn.commit()
        conn.close()

@dp.message_handler(text='üéÅ –ü—Ä–æ–º–æ–∫–æ–¥')
async def promo_handler(message: types.Message):
    await message.answer("–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ:\n/promo CODE")

@dp.message_handler(text='üë• –†–µ—Ñ–µ—Ä–∞–ª—ã')
async def referral_info(message: types.Message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/{(await bot.me).username}?start=ref_{user_id}"
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    c.execute('SELECT COUNT(*) FROM users WHERE invited_by = ?', (user_id,))
    ref_count = c.fetchone()[0]
    conn.close()
    
    await message.answer(
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n<code>{ref_link}</code>\n\n"
        f"üíé –í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        f"- {REFERRAL_BONUS} –∑–≤—ë–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ\n"
        f"- {REFERRAL_PERCENT}% –æ—Ç –≤—Å–µ—Ö –∏—Ö –ø–æ–∫—É–ø–æ–∫\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {ref_count} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö",
        parse_mode="HTML"
    )

@dp.message_handler(text='üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫')
async def show_history(message: types.Message):
    user_id = message.from_user.id
    try:
        history = []
        if os.path.exists('history.json'):
            with open('history.json', 'r', encoding='utf-8') as f:
                for line in f:
                    try:
                        history.append(json.loads(line.strip()))
                    except json.JSONDecodeError:
                        continue
        
        user_history = [h for h in history if str(user_id) in h]
        
        if not user_history:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫")
            return
            
        text = "üìÖ <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
        for item in user_history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
            data = item[str(user_id)]
            text += (
                f"‚ñ™ <b>{data['date']}</b>\n"
                f"   ‚≠ê –ó–≤—ë–∑–¥: {data['stars']}\n"
                f"   üí∞ –°—É–º–º–∞: {data['amount']}\n"
                f"   üîß –ú–µ—Ç–æ–¥: {data.get('method', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"   üö¶ –°—Ç–∞—Ç—É—Å: {data.get('status', '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')}\n\n"
            )
        
        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")

@dp.message_handler(text='üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
async def support_request(message: types.Message):
    try:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(
            "–ù–∞–ø–∏—Å–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", 
            url=f"https://t.me/{SUPPORT_CHAT_ID}"
        ))
        
        await message.answer(
            "üì© <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "–î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
            "2. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: <code>{}</code>".format(message.from_user.id),
            reply_markup=markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")

# [–û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]
@dp.message_handler(text='‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã')
async def show_stars_menu(message: types.Message):
    await message.answer(MESSAGES["start"], reply_markup=get_stars_keyboard())

@dp.callback_query_handler(lambda c: c.data.startswith("stars_"))
async def select_stars(callback_query: types.CallbackQuery):
    action = callback_query.data.split("_")[1]
    
    if action == "custom":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(
            callback_query.from_user.id,
            MESSAGES["select_amount"]
        )
        return
    
    stars = int(action)
    user_data[callback_query.from_user.id] = {"stars": stars}
    await bot.send_message(
        callback_query.from_user.id,
        MESSAGES["payment_choice"],
        reply_markup=get_payment_keyboard()
    )

@dp.message_handler(lambda message: message.text.isdigit())
async def process_custom_amount(message: types.Message):
    try:
        stars = int(message.text)
        
        if stars < MIN_STARS:
            await message.answer(MESSAGES["invalid_amount"])
            return
            
        user_data[message.from_user.id] = {"stars": stars}
        await message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {stars} –∑–≤—ë–∑–¥\n" + MESSAGES["payment_choice"],
            reply_markup=get_payment_keyboard()
        )
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1276).")

@dp.message_handler(lambda m: m.text in [
    PAYMENT_METHODS["kaspi"]["name"],
    PAYMENT_METHODS["cryptobot"]["name"],
    PAYMENT_METHODS["tonkeeper"]["name"]
])
async def select_payment(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥!")
        return
    
    if message.text == PAYMENT_METHODS["kaspi"]["name"]:
        method = "kaspi"
    elif message.text == PAYMENT_METHODS["cryptobot"]["name"]:
        method = "cryptobot"
    else:
        method = "tonkeeper"
    
    stars = user_data[user_id]["stars"]
    rate = RATES[method]["rate"]
    currency = RATES[method]["currency"]
    amount = (stars * rate) / 100
    
    user_data[user_id]["payment_method"] = method
    user_data[user_id]["amount"] = round(amount, 2)
    user_data[user_id]["currency"] = currency
    
    await message.answer(
        MESSAGES["payment_details"].format(
            method=PAYMENT_METHODS[method]["name"],
            amount=round(amount, 2),
            currency=currency,
            details=PAYMENT_METHODS[method]["details"]
        ),
        reply_markup=get_paid_button(),
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data == "user_paid")
async def user_paid(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_data:
        await bot.answer_callback_query(callback_query.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    payment_data = user_data[user_id]
    stars = payment_data["stars"]
    method = payment_data["payment_method"]
    amount = payment_data["amount"]
    currency = payment_data["currency"]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –º–µ—Ç–æ–¥–æ–º –æ–ø–ª–∞—Ç—ã
    save_history(user_id, stars, amount, method)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await bot.send_message(
        ADMIN_ID,
        MESSAGES["admin_notify"].format(
            username=callback_query.from_user.username,
            stars=stars,
            method=PAYMENT_METHODS[method]["name"],
            amount=amount,
            currency=currency
        ),
        reply_markup=get_admin_confirm_keyboard(user_id),
        parse_mode="Markdown"
    )
    
    await bot.answer_callback_query(callback_query.id, "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É!")

@dp.callback_query_handler(lambda c: c.data.startswith("admin_"))
async def admin_decision(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_ID:
        await bot.answer_callback_query(callback_query.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏!")
        return
    
    action, user_id = callback_query.data.split("_")[1], int(callback_query.data.split("_")[2])
    
    if action == "confirm":
        await bot.send_message(user_id, MESSAGES["admin_confirm"])
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await bot.send_message(
            user_id,
            "üíå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤: @otzivibroshka"
        )
    else:
        await bot.send_message(user_id, MESSAGES["admin_reject"])
    
    await bot.answer_callback_query(callback_query.id, "‚úÖ –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

@dp.message_handler(commands=['create_promo'])
async def create_promocode(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    args = message.get_args().split()
    if len(args) != 2:
        await message.answer("–§–æ—Ä–º–∞—Ç: /create_promo CODE BONUS")
        return
    
    code, bonus = args[0], int(args[1])
    
    conn = sqlite3.connect('bot.db')
    c = conn.cursor()
    
    try:
        c.execute('INSERT INTO promocodes (code, bonus) VALUES (?, ?)',
                 (code, bonus))
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω! –ë–æ–Ω—É—Å: {bonus} –∑–≤–µ–∑–¥")
    except sqlite3.IntegrityError:
        await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    finally:
        conn.commit()
        conn.close()

def run_bot():
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        if not os.path.exists('history.json'):
            with open('history.json', 'w') as f:
                pass
        
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        logging.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
        os.execv(sys.executable, ['python'] + sys.argv)

if __name__ == "__main__":
    while True:
        run_bot()
        logging.warning("–ë–æ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        time.sleep(5)